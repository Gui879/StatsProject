a-> 4
a=4
a
a<-4
a
print(4)
if {}
if (4>5){}
if (7>5){print('ya')}
if (7>5){print('ya')}
setwd("~/Dropbox/MAA/stats_project/Data")
df=read.csv('ready_df')
View(df)
drop<- 'X'
df[ , !(names(df) %in% drop)]
View(df)
drop<- 'X'
df<-df[ , !(names(df) %in% drop)]
View(df)
library(car)
# To deal only with those two variables, let's create a new dataframe containing the variables income and education
newdata=Prestige[,c("education", "income")]
# To explore the distribution of these variables we can draw a histogram or a boxplot:
library(MASS)
truehist(newdata$income, main="Histogram of average income")
plot(density(newdata$income))
abline(v=median(newdata$income), col="red")
abline(v=mean(newdata$income), col="blue")
#### Exercise 1:
library(car)
library(MASS)
install.packages(car)
install.packages('car')
#### Exercise 1:
library(car)
newdata=Prestige[,c("education", "income")]
library(MASS)
truehist(newdata$income, main="Histogram of average income")
plot(density(newdata$income))
abline(v=median(newdata$income), col="red")
abline(v=mean(newdata$income), col="blue")
library(MASS)
truehist(df$depression_rate, main="Distribution of average depression rate")
plot(density(newdata$depression_rate))
abline(v=median(newdata$depression_rate), col="red")
abline(v=mean(newdata$depression_rate), col="blue")
library(MASS)
truehist(df$depression_rate, main="Distribution of average depression rate")
plot(density(newdata$depression_rate))
library(MASS)
truehist(df$depression_rate, main="Distribution of average depression rate")
plot(density(df$depression_rate))
abline(v=median(df$depression_rate), col="red")
abline(v=mean(df$depression_rate), col="blue")
plot(density(df$depression_rate),main="Distribution of average depression rate")
abline(v=median(df$depression_rate), col="red")
abline(v=mean(df$depression_rate), col="blue")
qqnorm(df$depression_rate)
qqnorm(df$depression_rate)
qqline(df$depression_rate)
#Getting the df ready:
df=read.csv('ready_df')
drop<- 'X'
df<-df[ , !(names(df) %in% drop)]
#seeing the distribution of our dependent variable
library(MASS)
#truehist(df$depression_rate, main="Distribution of average depression rate")
plot(density(df$depression_rate),main="Distribution of average depression rate")
abline(v=median(df$depression_rate), col="red")
abline(v=mean(df$depression_rate), col="blue")
qqnorm(df$depression_rate)
qqline(df$depression_rate,lwd=2)
qqnorm(df$depression_rate)
qqline(df$depression_rate,lwd=5)
qqnorm(df$depression_rate)
qqline(df$depression_rate,lwd=2)
qqnorm(df$depression_rate,col.lab="red")
qqline(df$depression_rate,lwd=2)
qqnorm(df$depression_rate,col='red')
qqline(df$depression_rate,lwd=2)
qqnorm(df$depression_rate)
qqline(df$depression_rate,lwd=2),col='red'
qqnorm(df$depression_rate)
qqline(df$depression_rate,lwd=2,col='red')
View(df)
library(corrplot)
install.packages('corrplot')
library(corrplot)
library(corrplot)
corrplot(df, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
library(corrplot)
corrplot(df)
library(corrplot)
corrplot(df, type="lower")
View(df)
library(corrplot)
corrplot(df[ , !(names(df) %in% 'country')], type="lower")
df[ , !(names(df) %in% 'country')]
View(df)
#install.packages('corrplot')
library(corrplot)
corrplot(df[ , !(names(df) %in% 'country')], type="lower")
library(corrplot)
corrplot(cor(df[ , !(names(df) %in% 'country')], type="lower"))
#install.packages('corrplot')
library(corrplot)
corrplot(cor(df[ , !(names(df) %in% 'country')]), type="lower")
#Getting the df ready:
df=read.csv('ready_df')
drop<- 'X'
df<-df[ , !(names(df) %in% drop)]
View(df)
library(corrplot)
corrplot(cor(df[ , !(names(df) %in% 'country')]), type="lower")
#Getting the df ready:
df=read.csv('ready_df')
drop<- 'X'
df<-df[ , !(names(df) %in% drop)]
library(MASS)
#truehist(df$depression_rate, main="Distribution of average depression rate")
plot(density(df$depression_rate),main="Distribution of average depression rate")
abline(v=median(df$depression_rate), col="red")
abline(v=mean(df$depression_rate), col="blue")
#making the Q-Q plot
qqnorm(df$depression_rate)
qqline(df$depression_rate,lwd=2,col='red')
#4) multicolinariedade (lol) das variaveis:
#install.packages('corrplot')
library(corrplot)
corrplot(cor(df[ , !(names(df) %in% 'country')]), type="lower")
df=read.csv('ready_df')
drop<- 'X'
df<-df[ , !(names(df) %in% drop)]
#3.1) variavel dependente com distribuicao normal:
library(MASS)
#truehist(df$depression_rate, main="Distribution of average depression rate")
plot(density(df$depression_rate),main="Distribution of average depression rate")
abline(v=median(df$depression_rate), col="red")
abline(v=mean(df$depression_rate), col="blue")
#making the Q-Q plot
qqnorm(df$depression_rate)
qqline(df$depression_rate,lwd=2,col='red')
library(corrplot)
corrplot(cor(df[ , !(names(df) %in% 'country')]), type="lower")
cor2pcor(cor(df[ , !(names(df) %in% 'country')]))
install.packages('GeneTS')
pcor(or(df[ , !(names(df) %in% 'country')))
pcor(cor(df[ , !(names(df) %in% 'country')]))
install.packages('ppcor')
library(ppcor)
pcor(cor(df[ , !(names(df) %in% 'country')]))
df.values
df.colunn
df.columns
df.columns()
names(DF)
names(df)
drop<-c('depression_rate','country')
df_reg<-df[ , !(names(df) %in% drop)]
list(names(df))
names(df)
#making the Q-Q plot
qqnorm(df$depression_rate)
qqline(df$depression_rate,lwd=2,col='red')
View(df)
View(df_reg)
model = lm(depression_rate~df_reg, data=df)
df_reg<-names(df[ , !(names(df) %in% drop)])
model = lm(depression_rate~df_reg, data=df)
df_reg<-list(names(df[ , !(names(df) %in% drop)]))
model = lm(depression_rate~df_reg, data=df)
xnam <- paste("x", 1:25, sep="")
(fmla <- as.formula(paste("y ~ ", paste(xnam, collapse= "+"))))
colnames(df)
colnames(df) - 'country'
type(colnames(df))
typeof(colnames(df))
typeof(colnames(df))
typeof(names(df))
typeof(list(names(df)))
list(names(df)) - 'country'
[for column in list(names(df)) if column != 'country']
[column for column in list(names(df)) if column != 'country']
[x for x in range(1000) if x % 3== 0 or x % 5== 0]
[x for x in range(1000) if x % 3== 0 or x % 5== 0]
[x for x in range(1000) if x % 3== 0 or x % 5== 0]
[x for x in range(1000) if x % 3== 0 or x % 5== 0]
[x for x in range(1000) if x % 3== 0 or x % 5== 0]
list([x for x in range(1000) if x % 3== 0 or x % 5== 0])
list([x for x in range(1000) if x % 3== 0 or x % 5== 0])
list([x for x in range(1000) if x % 3== 0 or x % 5== 0])
list([x for x in range(1000) if x % 3== 0 or x % 5== 0])
list([x for x in range(1000) if x % 3== 0 or x % 5== 0])
list([x for x in range(1000) if x % 3== 0 or x % 5== 0])
[column for (column in list(names(df))) if column != 'country']
vis=list()
drop<-c('depression_rate','country')
df_reg<-list(names(df[ , !(names(df) %in% drop)]))
vis=list()
for (column in list(names(df))){
if (column !='country' & column!='depression_rate'){
vis.append(column)
}
}
drop<-c('depression_rate','country')
df_reg<-list(names(df[ , !(names(df) %in% drop)]))
vis=list()
for (column in list(names(df))){
if ((column !='country')&(column!='depression_rate')){
vis.append(column)
}
}
#LINEAR REGRESSION:
drop<-c('depression_rate','country')
df_reg<-list(names(df[ , !(names(df) %in% drop)]))
vis=list()
for (column in list(names(df))){
if (column !='country'){if(column!='depression_rate'){
vis.append(column)
}}
drop<-c('depression_rate','country')
df_reg<-list(names(df[ , !(names(df) %in% drop)]))
vis=list()
for (column in list(names(df))){
if (column !='country'){
if(column!='depression_rate'){
vis.append(column)
}
}}
#LINEAR REGRESSION:
drop<-c('depression_rate','country')
df_reg<-list(names(df[ , !(names(df) %in% drop)]))
vis=list()
for (column in list(names(df))){
if (column !='country'){
if(column!='depression_rate'){
vis<-append(vis,column)
}
}}
vis=list()
for (column in list(names(df))){
if (column !='country'){
if(column!='depression_rate'){
vis<-append(vis,column)
}
}}
.
,,
vis=list(['year',
'education',
'gdp_per_capita',
'gini_index',
'greenhousepc',
'pop_density',
'productivity_per_hour',
'remuneration_per_capita',
'unemployment',
'inflation',
'divorce_p/100_marriges',
'CO2_emissions',
'depression_rate',
'ageGroup_0-24',
'ageGroup_25-64',
'ageGroup_65+'])
vis=list(c('year',
'education',
'gdp_per_capita',
'gini_index',
'greenhousepc',
'pop_density',
'productivity_per_hour',
'remuneration_per_capita',
'unemployment',
'inflation',
'divorce_p/100_marriges',
'CO2_emissions',
'depression_rate',
'ageGroup_0-24',
'ageGroup_25-64',
'ageGroup_65+'))
View(vis)
vis=array(c('year',
'education',
'gdp_per_capita',
'gini_index',
'greenhousepc',
'pop_density',
'productivity_per_hour',
'remuneration_per_capita',
'unemployment',
'inflation',
'divorce_p/100_marriges',
'CO2_emissions',
'depression_rate',
'ageGroup_0-24',
'ageGroup_25-64',
'ageGroup_65+'))
vis=c('year',
'education',
'gdp_per_capita',
'gini_index',
'greenhousepc',
'pop_density',
'productivity_per_hour',
'remuneration_per_capita',
'unemployment',
'inflation',
'divorce_p/100_marriges',
'CO2_emissions',
'depression_rate',
'ageGroup_0-24',
'ageGroup_25-64',
'ageGroup_65+')
vis=list(c('year',
'education',
'gdp_per_capita',
'gini_index',
'greenhousepc',
'pop_density',
'productivity_per_hour',
'remuneration_per_capita',
'unemployment',
'inflation',
'divorce_p/100_marriges',
'CO2_emissions',
'depression_rate',
'ageGroup_0-24',
'ageGroup_25-64',
'ageGroup_65+'))
vis[1]
vis[0]
vis[2]
vis[4]
vis=c('year',
'education',
'gdp_per_capita',
'gini_index',
'greenhousepc',
'pop_density',
'productivity_per_hour',
'remuneration_per_capita',
'unemployment',
'inflation',
'divorce_p/100_marriges',
'CO2_emissions',
'depression_rate',
'ageGroup_0-24',
'ageGroup_25-64',
'ageGroup_65+')
vis[0]
vis[1]
vis[2]
model = lm(depression_rate~vis, data=df)
df=read.csv('ready_df')
drop<- 'X'
df<-df[ , !(names(df) %in% drop)]
model = lm(depression_rate~year+education+gdp_per_capita+gini_index+greenhousepc+pop_density+productivity_per_hour+
remuneration_per_capita+unemployment+inflation+divorce_p_100_marriges+CO2_emissions+ageGroup_0.24+
ageGroup_25.64_ageGroup_65+, data=df)
df=read.csv('ready_df')
drop<- 'X'
df<-df[ , !(names(df) %in% drop)]
model = lm(depression_rate~year+education+gdp_per_capita+gini_index+greenhousepc+pop_density+productivity_per_hour+
remuneration_per_capita+unemployment+inflation+divorce_p_100_marriges+CO2_emissions+ageGroup_0.24+
ageGroup_25.64_ageGroup_65_more, data=df)
model = lm(depression_rate~year+education+gdp_per_capita+gini_index+greenhousepc+pop_density+productivity_per_hour+
remuneration_per_capita+unemployment+inflation+divorce_p_100_marriges+CO2_emissions+ageGroup_0.24+
ageGroup_25.64+ageGroup_65_more, data=df)
library(car)
# To deal only with those two variables, let's create a new dataframe containing the variables income and education
newdata=Prestige[,c("education", "income")]
# Estimation:
model1 = lm(income~education, data=newdata)
View(model1)
summary(model)
results<-summary(model)
View(results)
summary(model)
View(df)
colnames(df)
model = lm(depression_rate~year+education+gdp_per_capita+gini_index+greenhousepc+pop_density+productivity_per_hour+
remuneration_per_capita+unemployment+inflation+divorce_p_100_marriges+CO2_emissions+ageGroup_0.24+
ageGroup_25.64+ageGroup_65_more, data=df)
summary(model)
df_scaled<-scale(df, center = TRUE, scale = TRUE)
View(df)
df=read.csv('ready_df')
drop<- 'X'
df<-df[ , !(names(df) %in% drop)]
df_scaled<-scale(df, center = TRUE, scale = TRUE)
drop<-'country'
df_scaled<-scale(df[ , !(names(df) %in% drop)], center = TRUE, scale = TRUE)
View(df_scaled)
model = lm(depression_rate~year+education+gdp_per_capita+gini_index+greenhousepc+pop_density+productivity_per_hour+
remuneration_per_capita+unemployment+inflation+divorce_p_100_marriges+CO2_emissions+ageGroup_0.24+
ageGroup_25.64+ageGroup_65_more, data=df_scaled)
df_scaled<-data.frame(scale(df[ , !(names(df) %in% drop)], center = TRUE, scale = TRUE))
#LINEAR REGRESSION:
model = lm(depression_rate~year+education+gdp_per_capita+gini_index+greenhousepc+pop_density+productivity_per_hour+
remuneration_per_capita+unemployment+inflation+divorce_p_100_marriges+CO2_emissions+ageGroup_0.24+
ageGroup_25.64+ageGroup_65_more, data=df_scaled)
summary(model)
model = lm(depression_rate~0+year+education+gdp_per_capita+gini_index+greenhousepc+pop_density+productivity_per_hour+
remuneration_per_capita+unemployment+inflation+divorce_p_100_marriges+CO2_emissions+ageGroup_0.24+
ageGroup_25.64+ageGroup_65_more, data=df_scaled)
summary(model)
View(df)
